/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }
        publishDir       = [
            [
                path: { "${params.outdir}/fastqc/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    withName: FASTQC_AFTER_TRIMMING {
        ext.args = '--quiet'
        ext.when         = { !(params.skip_tools && (params.skip_tools.split(',').contains('fastqc') || params.skip_tools.split(',').contains('cutadapt'))) }
        publishDir       = [
            [
                path: { "${params.outdir}/fastqc_after_trimming/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    withName: CUTADAPT {
        ext.args = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('cutadapt')) }
        publishDir       = [
            [
                path: { "${params.outdir}/cutadapt/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*gz"
            ]
        ]
    }

    withName: 'UNCOMPRESS_FASTA_GENOME|UNCOMPRESS_GFF' {
        publishDir       = [
            [
                path: { "${params.outdir}/references" },
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_SELECTIVE_ALIGNMENT:SALMON_INDEX' {
        publishDir = [
            path: { "${params.outdir}/salmon_SA/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_SELECTIVE_ALIGNMENT:SALMON_QUANT' {
        publishDir = [
            path: { "${params.outdir}/salmon_SA/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_SELECTIVE_ALIGNMENT:SALMON_SPLIT_TABLE_EACH' {
        publishDir = [
            path: { "${params.outdir}/salmon_SA/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_SELECTIVE_ALIGNMENT:SALMON_SPLIT_TABLE_COMBINED' {
        publishDir = [
            path: { "${params.outdir}/salmon_SA/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_SELECTIVE_ALIGNMENT:COMBINE_QUANTIFICATION_RESULTS_SALMON' {
        publishDir = [
            path: { "${params.outdir}/salmon_SA/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_SELECTIVE_ALIGNMENT:EXTRACT_PROCESSED_READS' {
        publishDir = [
            path: { "${params.outdir}/mapping_statistics/salmon_SA/" },
            mode: params.publish_dir_mode
        ]
    }


    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:STAR_GENOMEGENERATE' {
        publishDir = [
            path: { "${params.outdir}/STAR_SALMON/star/" },
            mode: params.publish_dir_mode
        ]
    }
    
    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:STAR_HTSEQ:STAR_GENOMEGENERATE' {
        publishDir = [
            path: { "${params.outdir}/STAR_HTSEQ/star/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:STAR_ALIGN' {
        ext.args = ['--readFilesCommand gunzip -c',
        "--outSAMunmapped ${params.outSAMunmapped}",
        "--outSAMattributes ${params.outSAMattributes}",
        "--sjdbGTFfeatureExon ${params.sjdbGTFfeatureExon}",
        "--sjdbGTFtagExonParentTranscript ${params.sjdbGTFtagExonParentTranscript}",
        "--quantMode ${params.quantMode}",
        "--quantTranscriptomeBan ${params.quantTranscriptomeBan}",
        "--outFilterMultimapNmax ${params.outFilterMultimapNmax}",
        "--outFilterType ${params.outFilterType}",
        "--limitBAMsortRAM ${params.limitBAMsortRAM}",
        "--alignSJoverhangMin ${params.alignSJoverhangMin}",
        "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
        "--outFilterMismatchNmax ${params.outFilterMismatchNmax}",
        "--outFilterMismatchNoverReadLmax ${params.outFilterMismatchNoverReadLmax}",
        "--alignIntronMin ${params.alignIntronMin}",
        "--alignIntronMax ${params.alignIntronMax}",
        "--alignMatesGapMax ${params.alignMatesGapMax}",
        "--winAnchorMultimapNmax ${params.winAnchorMultimapNmax}"].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/STAR_SALMON/star/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:STAR_HTSEQ:STAR_ALIGN' {
        ext.args = ['--readFilesCommand gunzip -c',
        "--outSAMunmapped ${params.outSAMunmapped}",
        "--outSAMattributes ${params.outSAMattributes}",
        "--sjdbGTFfeatureExon ${params.sjdbGTFfeatureExon}",
        "--sjdbGTFtagExonParentTranscript ${params.sjdbGTFtagExonParentTranscript}",
        "--quantMode ${params.quantMode}",
        "--quantTranscriptomeBan ${params.quantTranscriptomeBan}",
        "--outFilterMultimapNmax ${params.outFilterMultimapNmax}",
        "--outFilterType ${params.outFilterType}",
        "--limitBAMsortRAM ${params.limitBAMsortRAM}",
        "--alignSJoverhangMin ${params.alignSJoverhangMin}",
        "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
        "--outFilterMismatchNmax ${params.outFilterMismatchNmax}",
        "--outFilterMismatchNoverReadLmax ${params.outFilterMismatchNoverReadLmax}",
        "--alignIntronMin ${params.alignIntronMin}",
        "--alignIntronMax ${params.alignIntronMax}",
        "--alignMatesGapMax ${params.alignMatesGapMax}",
        "--winAnchorMultimapNmax ${params.winAnchorMultimapNmax}"].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/STAR_HTSEQ/star/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:SALMON_QUANT' {
        publishDir = [
            path: { "${params.outdir}/STAR_SALMON/salmon/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:SALMON_SPLIT_TABLE_EACH' {
        publishDir = [
            path: { "${params.outdir}/STAR_SALMON/salmon/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:SALMON_SPLIT_TABLE_COMBINED' {
        publishDir = [
            path: { "${params.outdir}/STAR_SALMON/salmon/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:COMBINE_QUANTIFICATION_RESULTS_SALMON' {
        publishDir = [
            path: { "${params.outdir}/STAR_SALMON/salmon/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_DUALRNASEQ:DUALRNASEQ:SALMON_ALIGNMENT_BASED:EXTRACT_PROCESSED_READS' {
        publishDir = [
            path: { "${params.outdir}/mapping_statistics/STAR_SALMON/" },
            mode: params.publish_dir_mode
        ]
    }

}
